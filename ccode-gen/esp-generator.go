package ccode_gen

import (
	_ "embed"
	"fmt"
	"path/filepath"
	"time"

	ccode_utils "github.com/jurgen-kluft/ccode/ccode-utils"
)

// -------------------------------------------------------------------------------------
// -------------------------------------------------------------------------------------

type EspMakeGenerator struct {
	Workspace     *Workspace
	Verbose       bool
	TargetAbsPath string
	Libraries     []*Project
	Product       *Project
}

func NewEspMakeGenerator(ws *Workspace, verbose bool) *EspMakeGenerator {
	g := &EspMakeGenerator{
		Workspace: ws,
		Verbose:   verbose,
	}
	g.TargetAbsPath = ws.GenerateAbsPath

	// Add the libraries
	for _, p := range ws.ProjectList.Values {
		if p.TypeIsLib() || p.TypeIsDll() {
			g.Libraries = append(g.Libraries, p)
		} else if p.TypeIsExe() {
			g.Product = p
		}
	}

	return g
}

func (g *EspMakeGenerator) Generate() error {

	// Use Clay to setup a project and populate it with the libraries
	// and the product.
	// We could 'compile' and copy a Go binary to the build directory
	// which the user could use to 'compile'the project.
	// We can also provide other usefull utilities in that binary, like
	// listing all the available libraries, available boards, possible
	// flash sizes, etc.

	// Copy clay code to "build/clay"
	// Generate a go file which creates the project and populates it with
	// the libraries and source files.

	// Output Example:
	//
	// var Project *clay.Project = &clay.Project{
	//     Name:       "ccode_gen",
	//     Version:    "0.1.0",
	//     BuildPath:  BuildPath,
	//     Executable: clay.NewExecutable("ccode_gen", "0.1.0", BuildPath),
	// }

	return nil
}

func (g *EspMakeGenerator) GenerateBuildInfo(buildDir string, espRootDir string, headerFile string, sourceFile string) error {
	mk := ccode_utils.NewLineWriter(ccode_utils.IndentModeTabs)
	mk.WriteLine(`// This file is generated by the 'ccode_gen' build system`)

	BUILD_DATE := time.Now().Format("2006-01-02")
	BUILD_TIME := time.Now().Format("15:04:05")

	gitVersion, _ := BuildGitInfo(g.Workspace.WorkspaceAbsPath, "git")
	gitEspVersion, _ := BuildGitInfo(espRootDir, "git")

	mk.WriteLine(`#include <buildinfo.h>`)
	mk.WriteLine()
	mk.WriteLine(`__BuildInfo_t__ __BuildInfo__ = {`)
	mk.WriteLine(`    "`, BUILD_DATE, `",`)
	mk.WriteLine(`    "`, BUILD_TIME, `",`)
	mk.WriteLine(`    "`, gitVersion.Version, `",`)
	mk.WriteLine(`    "`, gitEspVersion.Version, `"`)
	mk.WriteLine(`};`)
	mk.WriteLine()

	if err := mk.WriteToFile(filepath.Join(buildDir, sourceFile)); err != nil {
		return fmt.Errorf("Error writing build info source file: %s", err)
	}
	mk.Clear()

	mk.WriteLine(`// This file is generated by the build system`)

	mk.WriteLine()
	mk.WriteLine(`typedef struct {`)
	mk.WriteLine(`    const char *date;`)
	mk.WriteLine(`    const char *time;`)
	mk.WriteLine(`    const char *src_version;`)
	mk.WriteLine(`    const char *env_version;`)
	mk.WriteLine(`} __BuildInfo_t__;`)
	mk.WriteLine()

	if err := mk.WriteToFile(filepath.Join(buildDir, headerFile)); err != nil {
		return fmt.Errorf("Error writing build info header file: %s", err)
	}

	return nil
}
