using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.IO;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Linq;
using System.Text;
using System.Runtime;
using Ionic.Zip;
using Ionic.Zlib;
using MSBuild.XCode.Helpers;

namespace MSBuild.XCode
{
    public class PackageCreate : Task
    {
        public string Path { get; set; }
        public string Platform { get; set; }
        public string Branch { get; set; }

        [Output]
        public string Version{ get; set; }
        [Output]
        public string Filename { get; set; }

        public override bool Execute()
        {
            bool success = false;

            if (String.IsNullOrEmpty(Platform))
                Branch = "Win32";
            if (String.IsNullOrEmpty(Branch))
                Branch = "default";

            if (!Path.EndsWith("\\"))
                Path = Path + "\\";

            Environment.CurrentDirectory = Path;

            if (!File.Exists("package.xml"))
                return false;

            XPackage package = new XPackage();
            package.Load(Path + "package.xml");

            /// Delete the .sfv file
            string sfv_filename = package.Name + "\\" + Platform + "\\" + package.Name + ".md5";
            if (File.Exists("target\\" + sfv_filename))
                File.Delete("target\\" + sfv_filename);

            /// 1) Create zip file
            /// 2) For every file create an MD5 and gather them into a sfv file
            /// 3) Remove root from every source file
            /// 4) Set the work directory
            /// 5) Add files to zip
            /// 6) Close
            /// 
            Environment.CurrentDirectory = Path;
            xDirname dir = new xDirname(Path + "target\\");
            DirectoryScanner scanner = new DirectoryScanner(dir);
            scanner.scanSubDirs = true;
            xDirname subDir = new xDirname(package.Name + "\\" + Platform);
            scanner.collect(subDir, "*.*", DirectoryScanner.EmptyFilterDelegate);

            MD5CryptoServiceProvider md5_provider = new MD5CryptoServiceProvider();
            Dictionary<string, byte[]> md5Dictionary = new Dictionary<string, byte[]>();
            List<KeyValuePair<string, string>> sourceFilenames = new List<KeyValuePair<string, string>>();
            foreach (xFilename src_filename in scanner.filenames)
            {
                FileStream fs = new FileStream("target\\" + src_filename, FileMode.Open, FileAccess.Read);
                byte[] md5 = md5_provider.ComputeHash(fs);
                fs.Close();

                xFilename filename = src_filename.MakeRelative(subDir);

                md5Dictionary.Add(filename, md5);

                string zip_filename = src_filename;
                sourceFilenames.Add(new KeyValuePair<string, string>(src_filename, System.IO.Path.GetDirectoryName(src_filename)));
            }

            using (FileStream wfs = new FileStream("target\\" + sfv_filename, FileMode.Create))
            { 
                StreamWriter writer = new StreamWriter(wfs);
                writer.WriteLine("; Generated by MSBuild.XCode");
                foreach (KeyValuePair<string, byte[]> k in md5Dictionary)
                {
                    writer.WriteLine("{0} *{1}", k.Key, StringTools.MD5ToString(k.Value));
                }
                writer.Close();
                wfs.Close();

                sourceFilenames.Add(new KeyValuePair<string, string>(sfv_filename, System.IO.Path.GetDirectoryName(sfv_filename)));
            }

            // Versioning:
            // - Get package.Version
            // - Build = (DateTime.Year).(DateTime.Month).(DateTime.Day).(DateTime.Hour).(DateTime.Minute).(DateTime.Second)

            // VCS:
            // - Get revision information and write it into a file
            // - Add that file to the source file list to include it into the zip package
            // @TODO

            XVersion version = package.Versions.GetForPlatformWithBranch(Platform, Branch);

            DateTime t = DateTime.Now;
            Version = version.ToString() + String.Format(".{0}.{1}.{2}.{3}.{4}.{5}", t.Year, t.Month, t.Day, t.Hour, t.Minute, t.Second);

            Filename = package.Name + "-" + Version + "-" + Branch + "-" + Platform + ".zip";
            if (File.Exists(Filename))
            {
                try { File.Delete(Filename); }
                catch(Exception) {}
            }

            using (ZipFile zip = new ZipFile("target\\" + Filename))
            {
                foreach (KeyValuePair<string, string> p in sourceFilenames)
                    zip.AddFile(Path + "target\\" + p.Key, p.Value);

                zip.Save();
                success = true;
            }
            return success;
        }
    }
}
