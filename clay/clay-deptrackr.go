package clay

import (
	"crypto/sha1"
	"os"

	dep "github.com/jurgen-kluft/ccode/clay/deptrackr"
)

// The DepTrackr in clay is based on the output of compilers
// like gcc, clang, etc. It uses the .d files generated by these compilers.

type DepTrackr struct {
	Tracker *dep.DepTrackr
}

func NewDepTrackr(buildDir string) *DepTrackr {
	return &DepTrackr{
		Tracker: dep.NewDepTrackr(buildDir),
	}
}

func FileModCompare(fa []byte, fb []byte) bool {
	// Compare the file modification times
	if len(fa) != len(fb) {
		return false
	}
	for i := range fa {
		if fa[i] != fb[i] {
			return false
		}
	}
	return true
}

func (d *DepTrackr) QueryFile(srcfileAbsFilepath string) bool {

	hasher := sha1.New()
	hasher.Write([]byte(srcfileAbsFilepath))
	mainDigest := hasher.Sum(nil)

	d.Tracker.QueryItem(mainDigest, true, func(itemChangeFlags uint32, itemChangeData []byte, itemIdFlags uint32, itemIdData []byte) dep.State {
		if itemIdFlags&dep.ItemFlagSourceFile == dep.ItemFlagSourceFile || itemIdFlags&dep.ItemFlagDependency == dep.ItemFlagDependency {
			srcFileInfo, err := os.Stat(string(itemIdData))
			if err != nil {
				return dep.StateError
			}
			fileModTimeData, _ := srcFileInfo.ModTime().MarshalBinary()

			// Check if the file modification time matches
			if FileModCompare(fileModTimeData, itemChangeData) {
				// The file is up to date
				return dep.StateUpToDate
			}
			return dep.StateOutOfDate
		} else {
			// This is not a source file or dependency file, so we ignore it
			return dep.StateIgnore
		}
	})

	return false
}

// In short form a .d file (items are separated by '\'):
// <object-file>: \ <source-file> \ <header-file> \ ...

func (d *DepTrackr) AddFile(srcfileAbsFilepath string, depfileAbsFilepath string) error {
	content, err := os.ReadFile(depfileAbsFilepath)
	if err != nil {
		return err
	}

	type part struct {
		from int
		to   int
	}

	// Parse the .d file content
	parts := []part{}
	current := part{from: 0, to: 0} // Start with an empty part
	for i, c := range content {
		if c == '\\' {
			// If we encounter a backslash, we assume the next part starts
			// Figure out the 'to' index of the current part by stepping back
			// ignoring any spaces, tabs, or newlines before the backslash
			end := i - 1
			for end >= 0 && (content[end] == ' ' || content[end] == '\t' || content[end] == '\n' || content[end] == '\r' || content[end] == ':') {
				end-- // move back until we find a non-(space,tab,cr,ln,:) character
			}
			current.to = end + 1 // set the 'to' index of the last part
			parts = append(parts, current)

			// Now we need to find the beginning of the next part, but first
			// skip space, tab, and newline characters after a backslash
			begin := i + 1
			for begin < len(content) && (content[begin] == ' ' || content[begin] == '\t' || content[begin] == '\n' || content[begin] == '\r') {
				begin++ // move forward until we find a non-(space,tab,cr,ln) character
			}
			current = part{from: begin, to: begin} // Start a new part

			i = begin // Set the index to continue scanning
		}
	}
	current.to = len(content)      // Set the 'to' index of the last part
	parts = append(parts, current) // Add the last part

	// part[0] is the object file, the rest are dependencies
	// Note: also add the .d file as a dependency

	// ----------------------------------------------------------------
	// We want the main item to be the source file
	hasher := sha1.New()
	hasher.Write([]byte(srcfileAbsFilepath))
	mainHash := hasher.Sum(nil)

	// For the 'change', we want the file modification time and hash it
	fileInfo, err := os.Stat(srcfileAbsFilepath)
	if err != nil {
		return err
	}

	// Use the file modification time as part of the item data
	modTimeBytes, err := fileInfo.ModTime().MarshalBinary()

	item := dep.ItemToAdd{
		IdData:       []byte(srcfileAbsFilepath),
		IdDigest:     mainHash,
		IdFlags:      dep.ItemFlagSourceFile,
		ChangeData:   modTimeBytes,
		ChangeDigest: nil, // mod-time is small enough, we do not need a hash
		ChangeFlags:  dep.ChangeFlagModTime,
	}

	// ----------------------------------------------------------------
	// We want the main item to be the source file
	hasher.Reset()
	hasher.Write([]byte(depfileAbsFilepath))
	mainHash = hasher.Sum(nil)

	// For the 'change', we want the file modification time and hash it
	fileInfo, err = os.Stat(depfileAbsFilepath)
	if err != nil {
		return err
	}

	// Use the file modification time as part of the item data
	modTimeBytes, err = fileInfo.ModTime().MarshalBinary()
	// hasher.Reset()
	// hasher.Write(modTimeBytes)
	// modTimeHash = hasher.Sum(nil)

	item = dep.ItemToAdd{
		IdData:       []byte(depfileAbsFilepath),
		IdDigest:     mainHash,
		IdFlags:      dep.ItemFlagSourceFile,
		ChangeData:   modTimeBytes,
		ChangeDigest: nil, // mod-time is small enough, we do not need a hash
		ChangeFlags:  dep.ChangeFlagModTime,
	}

	depItems := []dep.ItemToAdd{}
	for _, p := range parts {
		// Make sure the digest of a dependency will be unique and
		// not collide when the same file is used as a main item
		hasher.Reset()
		hasher.Write([]byte{'d', 'e', 'p'})
		hasher.Write(content[p.from:p.to])
		depDigest := hasher.Sum(nil)

		// For the 'change', we want the file modification time and hash it
		fileInfo, err = os.Stat(string(content[p.from:p.to]))
		if err != nil {
			return err
		}

		// Use the file modification time as part of the item data
		// Note: make sure this digest is unique for each dependency
		modTimeBytes, err = fileInfo.ModTime().MarshalBinary()
		// hasher.Reset()
		// hasher.Write(depDigest)
		// hasher.Write(modTimeBytes)
		// modTimeHash = hasher.Sum(nil)

		depItem := dep.ItemToAdd{
			IdDigest:     depDigest,
			IdData:       content[p.from:p.to],
			ChangeDigest: nil, // mod-time is small enough, we do not need a hash
			ChangeData:   modTimeBytes,
			ChangeFlags:  dep.ChangeFlagModTime,
		}
		depItems = append(depItems, depItem)
	}

	d.Tracker.AddItem(item, depItems)

	return nil
}
