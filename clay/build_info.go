package clay

import (
	"fmt"
	"path/filepath"

	"github.com/jurgen-kluft/ccode/foundation"
)

// TODO should the cpp code be emitted in a C++ namespace ?

func GenerateBuildInfo(buildDir string, appDir string, sdkDir string, filenameWithoutExt string) error {
	mk := foundation.NewLineWriter(foundation.IndentModeTabs)
	mk.WriteLine(`// This file is generated by the 'ccode_gen' build system`)

	appVersion := foundation.NewGitVersionInfo(appDir)
	sdkVersion := foundation.NewGitVersionInfo(sdkDir)

	BUILD_DATE_APP := appVersion.CommitDate
	BUILD_DATE_SDK := sdkVersion.CommitDate

	mk.WriteLine(`#include <`, filenameWithoutExt, `.h>`)
	mk.WriteLine()
	mk.WriteLine(`__BuildInfo_t__ __BuildInfo__ = {`)
	mk.WriteLine(`    "`, BUILD_DATE_APP, `",`)
	mk.WriteLine(`    "`, appVersion.Commit, `",`)
	mk.WriteLine(`    "`, BUILD_DATE_SDK, `",`)
	mk.WriteLine(`    "`, sdkVersion.Commit, `"`)
	mk.WriteLine(`};`)
	mk.WriteLine()

	if err := mk.WriteToFile(filepath.Join(buildDir, filenameWithoutExt+".cpp")); err != nil {
		return fmt.Errorf("Error writing build info source file: %s", err)
	}
	mk.Clear()

	mk.WriteLine(`// This file is generated by the build system`)

	mk.WriteLine()
	mk.WriteLine(`typedef struct {`)
	mk.WriteLine(`    const char *src_date;`)
	mk.WriteLine(`    const char *src_commit;`)
	mk.WriteLine(`    const char *sdk_date;`)
	mk.WriteLine(`    const char *sdk_commit;`)
	mk.WriteLine(`} __BuildInfo_t__;`)
	mk.WriteLine()

	if err := mk.WriteToFile(filepath.Join(buildDir, filenameWithoutExt+".h")); err != nil {
		return fmt.Errorf("Error writing build info header file: %s", err)
	}

	return nil
}
