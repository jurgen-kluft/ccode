package clay

// Open Questions:
//
// - How do identify stale entries that should be pruned?
//

// Design and Implementation Notes:
// - Fully custom database
// - Could be written in C, since can have mmap and other
//   performance optimizations.

// Dependency Tracking General Information:
//
// The purpose of dependency tracking is to not compile a source file if it
// and all of its dependencies have not changed, including the .o output file.
//
// In C/C++, a source file can include other source files and header files.
// This can create a tree of dependencies, the root of the tree is the main
// source file.
//
// Gcc and other compilers generate a .d file that contains the dependencies of
// a source file. The .d file is generated by the compiler and contains the
// dependencies of the source file.
//

// file.db.clay
// File (16 bytes)
//   - int32, index to Hash-Node, hash(ToLower(absolute filepath))
//   - int32, index to String (absolute filepath)
//   - int32, index to Hash (content/modification time hash)
//   - int32, padding

// A file represents a source file, header file or any other file that is
// a dependency of a source file. The file is identified by its hash, whic
// is a SHA1 hash of the file path.

// dep.db.clay
// Dep (16 bytes)
//   - int32, index to '.c'/'.cpp' File
//   - int32, index to '.d' File
//   - int32, index to Hash-Node (hash of command-line arguments)
//   - int32, index to Node (list of dependencies, e.g. '.o' file and '.h' files)

// A dependency represents the dependency description of a source file.

// node.db.clay
// Node (16 bytes)
//   - int32, index to File
//   - int32, next list node
//   - int32, prev list node
//   - int32, padding

// hash-node.db.clay
// Hash-Node (16 bytes, freelist)
//   - int64, index to Tree-Node or File
//   - int32, index to byte[20] (SHA1)
//   - int32, padding

// We separate hash-node and the actual hash, so that we can sort on the
// hash-node and not the hash. When sorting we can 'update' the Hash-Node
// index of the File or Tree-Node.
//

// hash.db.clay
// Hash-DB
//   - freelist
//   Array of byte[20]

// string.db.clay
// String
//   - strings have a length prefix of uint32
//   - [length][bytes[length]]{padding}
//   - aligned to 8 bytes
